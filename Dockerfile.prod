# Multi-stage Docker build for production deployment
# Stage 1: Build backend
FROM node:20-alpine AS backend-builder

WORKDIR /app/backend

# Copy backend package files
COPY backend/package*.json ./

# Install backend dependencies (production only)
RUN npm ci --only=production

# Copy backend source
COPY backend/ ./

# Build backend (TypeScript compilation)
RUN npm run build

# Stage 2: Build frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app

# Copy frontend package files
COPY package*.json ./

# Install frontend dependencies
RUN npm ci

# Copy frontend source
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./
COPY tsconfig*.json ./
COPY vite.config.ts ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Build frontend for production
RUN npm run build

# Stage 3: Production runtime
FROM node:20-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    curl \
    dumb-init \
    sqlite

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy backend build and dependencies
COPY --from=backend-builder --chown=nextjs:nodejs /app/backend/dist ./backend/dist
COPY --from=backend-builder --chown=nextjs:nodejs /app/backend/node_modules ./backend/node_modules
COPY --from=backend-builder --chown=nextjs:nodejs /app/backend/package.json ./backend/package.json

# Copy frontend build
COPY --from=frontend-builder --chown=nextjs:nodejs /app/dist ./frontend/dist

# Copy nginx config
COPY --chown=nextjs:nodejs nginx.conf /etc/nginx/nginx.conf

# Create necessary directories
RUN mkdir -p /app/data/logs /app/data/backups && \
    chown -R nextjs:nodejs /app/data

# Copy startup script
COPY --chown=nextjs:nodejs docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Install nginx
RUN apk add --no-cache nginx

# Switch to non-root user
USER nextjs

# Expose ports
EXPOSE 3000 3001

# Set environment
ENV NODE_ENV=production
ENV PORT=3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3001/api/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["/usr/local/bin/docker-entrypoint.sh"]